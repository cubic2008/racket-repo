#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.4 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 61 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
          0 1098 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 193
(
 #"#reader(lib \"htdp-intermediate-lambda-reader.ss\" \"lang\")((modnam"
 #"e 2022-fall-a7) (read-case-sensitive #t) (teachpacks ()) (htdp-setti"
 #"ngs #(#t constructor repeating-decimal #f #t none #f () #f)))"
) 0 0 4 29 1 #"\n"
0 0 17 3 34 #";(define-struct student(name age))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";(define s1 (make-student \"John\" 21))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";(build-list 10 (lambda (x) (* 2 x)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";;; A7"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";; Q1b"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"anode"
0 0 24 3 1 #"("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 7 #"parent1"
0 0 24 3 1 #" "
0 0 14 3 7 #"parent2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 24 #"copyright-free-ancestors"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-anode"
0 0 19 3 6 #"\"Liso\""
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 10 #"make-anode"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"Homern't\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 10 #"make-anode"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"Abrahum\""
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 10 #"make-anode"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"Arville\""
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                    "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 10 #"make-anode"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Mana\""
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 10 #"make-anode"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Merge\""
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 10 #"make-anode"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Cloncy\""
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                   "
0 0 14 3 5 #"empty"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 10 #"make-anode"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Bombi\""
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-subtree"
0 0 24 3 1 #" "
0 0 14 3 2 #"AT"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 2 #"AT"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 10 #"anode-name"
0 0 24 3 1 #" "
0 0 14 3 2 #"AT"
0 0 24 3 3 #")) "
0 0 14 3 2 #"AT"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" [("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"AT1"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-subtree"
0 0 24 3 2 #" ("
0 0 14 3 13 #"anode-parent1"
0 0 24 3 1 #" "
0 0 14 3 2 #"AT"
0 0 24 3 2 #") "
0 0 14 3 4 #"name"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"AT2"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-subtree"
0 0 24 3 2 #" ("
0 0 14 3 13 #"anode-parent2"
0 0 24 3 1 #" "
0 0 14 3 2 #"AT"
0 0 24 3 2 #") "
0 0 14 3 4 #"name"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";             AT2)]))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 4 #"cond"
0 0 24 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"AT1"
0 0 24 3 2 #") "
0 0 14 3 3 #"AT2"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 3 #"AT1"
0 0 24 3 6 #"]))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-subtree"
0 0 24 3 1 #" "
0 0 14 3 24 #"copyright-free-ancestors"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Liso\""
0 0 24 3 2 #") "
0 0 14 3 24 #"copyright-free-ancestors"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-subtree"
0 0 24 3 1 #" "
0 0 14 3 24 #"copyright-free-ancestors"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"Homern't\""
0 0 24 3 3 #") ("
0 0 14 3 13 #"anode-parent1"
0 0 24 3 1 #" "
0 0 14 3 24 #"copyright-free-ancestors"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-subtree"
0 0 24 3 1 #" "
0 0 14 3 24 #"copyright-free-ancestors"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Merge\""
0 0 24 3 3 #") ("
0 0 14 3 13 #"anode-parent2"
0 0 24 3 1 #" "
0 0 14 3 24 #"copyright-free-ancestors"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-subtree"
0 0 24 3 1 #" "
0 0 14 3 24 #"copyright-free-ancestors"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"Abrahum\""
0 0 24 3 3 #") ("
0 0 14 3 13 #"anode-parent1"
0 0 24 3 2 #" ("
0 0 14 3 13 #"anode-parent1"
0 0 24 3 1 #" "
0 0 14 3 24 #"copyright-free-ancestors"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-subtree"
0 0 24 3 1 #" "
0 0 14 3 24 #"copyright-free-ancestors"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Mana\""
0 0 24 3 3 #") ("
0 0 14 3 13 #"anode-parent2"
0 0 24 3 2 #" ("
0 0 14 3 13 #"anode-parent1"
0 0 24 3 1 #" "
0 0 14 3 24 #"copyright-free-ancestors"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-subtree"
0 0 24 3 1 #" "
0 0 14 3 24 #"copyright-free-ancestors"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"Arville\""
0 0 24 3 3 #") ("
0 0 14 3 13 #"anode-parent1"
0 0 24 3 2 #" ("
0 0 14 3 13 #"anode-parent1"
0 0 24 3 2 #" ("
0 0 14 3 13 #"anode-parent1"
0 0 24 3 1 #" "
0 0 14 3 24 #"copyright-free-ancestors"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-subtree"
0 0 24 3 1 #" "
0 0 14 3 24 #"copyright-free-ancestors"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Cloncy\""
0 0 24 3 3 #") ("
0 0 14 3 13 #"anode-parent1"
0 0 24 3 2 #" ("
0 0 14 3 13 #"anode-parent2"
0 0 24 3 1 #" "
0 0 14 3 24 #"copyright-free-ancestors"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-subtree"
0 0 24 3 1 #" "
0 0 14 3 24 #"copyright-free-ancestors"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Bombi\""
0 0 24 3 3 #") ("
0 0 14 3 13 #"anode-parent2"
0 0 24 3 2 #" ("
0 0 14 3 13 #"anode-parent1"
0 0 24 3 2 #" ("
0 0 14 3 13 #"anode-parent2"
0 0 24 3 1 #" "
0 0 14 3 24 #"copyright-free-ancestors"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";(find-subtree copyright-free-ancestors \"Cloncy\")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";; Q1c"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";(define (get-f-generation AT n)"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";  (local [(define (get-f-generation/acc ATs m lon)"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";            (cond [(empty? ATs) empty]"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";                  [(= m 0) (cons (anode-name ATs) empty)]"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";                  [else"
0 0 24 29 1 #"\n"
0 0 17 3 98
(
 #";                   (local [(define llon (get-f-generation/acc (anod"
 #"e-parent1 ATs) (- m 1) empty))"
) 0 0 24 29 1 #"\n"
0 0 17 3 99
(
 #";                           (define rlon (get-f-generation/acc (anod"
 #"e-parent2 ATs) (- m 1) empty))]"
) 0 0 24 29 1 #"\n"
0 0 17 3 45 #";                     (append llon rlon))]))]"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";    (get-f-generation/acc AT n empty)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"get-f-generation"
0 0 24 3 1 #" "
0 0 14 3 2 #"AT"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 2 #"AT"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 10 #"anode-name"
0 0 24 3 1 #" "
0 0 14 3 2 #"AT"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" [("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"llon"
0 0 24 3 2 #" ("
0 0 14 3 16 #"get-f-generation"
0 0 24 3 2 #" ("
0 0 14 3 13 #"anode-parent1"
0 0 24 3 1 #" "
0 0 14 3 2 #"AT"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"rlon"
0 0 24 3 2 #" ("
0 0 14 3 16 #"get-f-generation"
0 0 24 3 2 #" ("
0 0 14 3 13 #"anode-parent2"
0 0 24 3 1 #" "
0 0 14 3 2 #"AT"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 4 #"llon"
0 0 24 3 1 #" "
0 0 14 3 4 #"rlon"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"get-f-generation"
0 0 24 3 1 #" "
0 0 14 3 24 #"copyright-free-ancestors"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 6 #"\"Liso\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"get-f-generation"
0 0 24 3 1 #" "
0 0 14 3 24 #"copyright-free-ancestors"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 10 #"\"Homern't\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Merge\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"get-f-generation"
0 0 24 3 1 #" "
0 0 14 3 24 #"copyright-free-ancestors"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 9 #"\"Abrahum\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Mana\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Cloncy\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"get-f-generation"
0 0 24 3 1 #" "
0 0 14 3 24 #"copyright-free-ancestors"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 9 #"\"Arville\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Bombi\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"get-f-generation"
0 0 24 3 1 #" "
0 0 14 3 24 #"copyright-free-ancestors"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #")"
0 0 21 3 1 #"'"
0 0 24 3 4 #" ())"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";; Q1d"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 40 #"(define (get-f-descendants-path AT name)"
0 0 17 29 1 #"\n"
0 0 17 3 57 #"  (local [(define get-f-descendants-path/acc AT name lon)"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"    (cond [(empty? AT) lon]"
0 0 17 29 1 #"\n"
0 0 17 3 60
#"          [(string=? name (anode-name AT)) (cons (anode-name"
0 0 17 3 12 #" AT) empty)]"
0 0 17 29 1 #"\n"
0 0 17 3 93
(
 #"          [else (local [(define parent1 (get-f-descendants-path (ano"
 #"de-parent1 AT) name lon))"
) 0 0 17 29 1 #"\n"
0 0 17 3 94
(
 #"                        (define parent2 (get-f-descendants-path (ano"
 #"de-parent2 AT) name lon))]"
) 0 0 17 29 1 #"\n"
0 0 17 3 71
(
 #"                  (cond [(and (empty? parent1) (empty? parent2)) emp"
 #"ty]"
) 0 0 17 29 1 #"\n"
0 0 17 3 73
(
 #"                        [(empty? parent1) (cons (anode-name AT) pare"
 #"nt2)]"
) 0 0 17 29 1 #"\n"
0 0 17 3 66
#"                        [else (cons (anode-name AT) parent1)]))])]"
0 0 17 29 1 #"\n"
0 0 17 3 48 #"    (get-f-descendants-path/acc AT name empty)))"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";(define (get-f-descendants-path AT name)"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";  (cond [(empty? AT) empty]"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";        [(string=? name (anode-name AT)) (cons (anode-name AT) empt"
 #"y)]"
) 0 0 24 29 1 #"\n"
0 0 17 3 88
(
 #";        [else (local [(define parent1 (get-f-descendants-path (anod"
 #"e-parent1 AT) name))"
) 0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";                      (define parent2 (get-f-descendants-path (anod"
 #"e-parent2 AT) name))]"
) 0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";                (cond [(and (empty? parent1) (empty? parent2)) empt"
 #"y]"
) 0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";                      [(empty? parent1) (cons (anode-name AT) paren"
 #"t2)]"
) 0 0 24 29 1 #"\n"
0 0 17 3 65
#";                      [else (cons (anode-name AT) parent1)]))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #";; This is a working solution, but define both local \"parent1\" and"
 #" \"parent2\" under the same level"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 22 #"get-f-descendants-path"
0 0 24 3 1 #" "
0 0 14 3 2 #"AT"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" [("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"reverse-list/acc"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 9 #"finallist"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 9 #"finallist"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 16 #"reverse-list/acc"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 9 #"finallist"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"reverse-list"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 16 #"reverse-list/acc"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 24 #"get-f-descendants-path/1"
0 0 24 3 1 #" "
0 0 14 3 2 #"AT"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 2 #"AT"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 10 #"anode-name"
0 0 24 3 1 #" "
0 0 14 3 2 #"AT"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 10 #"anode-name"
0 0 24 3 1 #" "
0 0 14 3 2 #"AT"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" [("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"parent1"
0 0 24 3 2 #" ("
0 0 14 3 24 #"get-f-descendants-path/1"
0 0 24 3 2 #" ("
0 0 14 3 13 #"anode-parent1"
0 0 24 3 1 #" "
0 0 14 3 2 #"AT"
0 0 24 3 2 #") "
0 0 14 3 4 #"name"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"parent2"
0 0 24 3 2 #" ("
0 0 14 3 24 #"get-f-descendants-path/1"
0 0 24 3 2 #" ("
0 0 14 3 13 #"anode-parent2"
0 0 24 3 1 #" "
0 0 14 3 2 #"AT"
0 0 24 3 2 #") "
0 0 14 3 4 #"name"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 7 #"parent1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 10 #"anode-name"
0 0 24 3 1 #" "
0 0 14 3 2 #"AT"
0 0 24 3 2 #") "
0 0 14 3 7 #"parent1"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                [("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 7 #"parent2"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 10 #"anode-name"
0 0 24 3 1 #" "
0 0 14 3 2 #"AT"
0 0 24 3 2 #") "
0 0 14 3 7 #"parent2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 7 #"]))]))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"reverse-list"
0 0 24 3 2 #" ("
0 0 14 3 24 #"get-f-descendants-path/1"
0 0 24 3 1 #" "
0 0 14 3 2 #"AT"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 107
(
 #";; This is a working solution, but define both local \"parent1\" and"
 #" \"parent2\" under the least required level"
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 33 #" (get-f-descendants-path AT name)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 3 #"  ("
0 0 17 3 5 #"local"
0 0 17 3 3 #" [("
0 0 17 3 6 #"define"
0 0 17 3 33 #" (reverse-list/acc lst finallist)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 13 #"            ("
0 0 17 3 4 #"cond"
0 0 17 3 25 #" [(empty? lst) finallist]"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 19 #"                  ["
0 0 17 3 4 #"else"
0 0 17 3 2 #" ("
0 0 17 3 16 #"reverse-list/acc"
0 0 17 3 2 #" ("
0 0 17 3 4 #"rest"
0 0 17 3 1 #" "
0 0 17 3 3 #"lst"
0 0 17 3 3 #") ("
0 0 17 3 4 #"cons"
0 0 17 3 27 #" (first lst) finallist))]))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 36 #"          (define (reverse-list lst)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 41 #"            (reverse-list/acc lst empty))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 11 #"          ("
0 0 17 3 6 #"define"
0 0 17 3 35 #" (get-f-descendants-path/1 AT name)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 13 #"            ("
0 0 17 3 4 #"cond"
0 0 17 3 20 #" [(empty? AT) empty]"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 20 #"                  [("
0 0 17 3 8 #"string=?"
0 0 17 3 1 #" "
0 0 17 3 4 #"name"
0 0 17 3 2 #" ("
0 0 17 3 10 #"anode-name"
0 0 17 3 1 #" "
0 0 17 3 2 #"AT"
0 0 17 3 4 #")) ("
0 0 17 3 4 #"cons"
0 0 17 3 24 #" (anode-name AT) empty)]"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 19 #"                  ["
0 0 17 3 4 #"else"
0 0 17 3 2 #" ("
0 0 17 3 5 #"local"
0 0 17 3 3 #" [("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 7 #"parent1"
0 0 17 3 2 #" ("
0 0 17 3 24 #"get-f-descendants-path/1"
0 0 17 3 27 #" (anode-parent1 AT) name))]"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 27 #"                          ("
0 0 17 3 4 #"cond"
0 0 17 3 3 #" [("
0 0 17 3 5 #"cons?"
0 0 17 3 1 #" "
0 0 17 3 7 #"parent1"
0 0 17 3 3 #") ("
0 0 17 3 4 #"cons"
0 0 17 3 26 #" (anode-name AT) parent1)]"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 33 #"                                ["
0 0 17 3 4 #"else"
0 0 17 3 2 #" ("
0 0 17 3 5 #"local"
0 0 17 3 3 #" [("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 7 #"parent2"
0 0 17 3 2 #" ("
0 0 17 3 24 #"get-f-descendants-path/1"
0 0 17 3 27 #" (anode-parent2 AT) name))]"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 41 #"                                        ("
0 0 17 3 4 #"cond"
0 0 17 3 3 #" [("
0 0 17 3 5 #"cons?"
0 0 17 3 1 #" "
0 0 17 3 7 #"parent2"
0 0 17 3 3 #") ("
0 0 17 3 4 #"cons"
0 0 17 3 26 #" (anode-name AT) parent2)]"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";                                              [else empty]))]))]))]"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";    (reverse-list (get-f-descendants-path/1 AT name))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 22 #"get-f-descendants-path"
0 0 24 3 1 #" "
0 0 14 3 24 #"copyright-free-ancestors"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"Arville\""
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 9 #"\"Arville\""
0 0 24 3 1 #" "
0 0 19 3 9 #"\"Abrahum\""
0 0 24 3 1 #" "
0 0 19 3 10 #"\"Homern't\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Liso\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 22 #"get-f-descendants-path"
0 0 24 3 1 #" "
0 0 14 3 24 #"copyright-free-ancestors"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Liso\""
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 6 #"\"Liso\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 22 #"get-f-descendants-path"
0 0 24 3 1 #" "
0 0 14 3 24 #"copyright-free-ancestors"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"Homern't\""
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 10 #"\"Homern't\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Liso\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 22 #"get-f-descendants-path"
0 0 24 3 1 #" "
0 0 14 3 24 #"copyright-free-ancestors"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"Abrahum\""
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 9 #"\"Abrahum\""
0 0 24 3 1 #" "
0 0 19 3 10 #"\"Homern't\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Liso\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 22 #"get-f-descendants-path"
0 0 24 3 1 #" "
0 0 14 3 24 #"copyright-free-ancestors"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Mana\""
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 6 #"\"Mana\""
0 0 24 3 1 #" "
0 0 19 3 10 #"\"Homern't\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Liso\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 22 #"get-f-descendants-path"
0 0 24 3 1 #" "
0 0 14 3 24 #"copyright-free-ancestors"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Merge\""
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 7 #"\"Merge\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Liso\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 22 #"get-f-descendants-path"
0 0 24 3 1 #" "
0 0 14 3 24 #"copyright-free-ancestors"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Cloncy\""
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 8 #"\"Cloncy\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Merge\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Liso\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 22 #"get-f-descendants-path"
0 0 24 3 1 #" "
0 0 14 3 24 #"copyright-free-ancestors"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Bombi\""
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 7 #"\"Bombi\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Cloncy\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Merge\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Liso\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 22 #"get-f-descendants-path"
0 0 24 3 1 #" "
0 0 14 3 24 #"copyright-free-ancestors"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"Unknown\""
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 22 #"get-f-descendants-path"
0 0 24 3 1 #" "
0 0 14 3 24 #"copyright-free-ancestors"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"Unknown\""
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";(define "
0 0 17 3 3 #"ss1"
0 0 17 3 51 #" (get-f-descendants-path copyright-free-ancestors \""
0 0 17 3 10 #"Arville\"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #"#"
0 0 17 3 1 #"|"
0 0 17 29 1 #"\n"
0 0 17 3 30 #";; Accumulateive reverse a lst"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 16 #"reverse-list/acc"
0 0 17 3 1 #" "
0 0 17 3 3 #"lst"
0 0 17 3 1 #" "
0 0 17 3 9 #"finallist"
0 0 17 3 1 #")"
0 0 17 29 1 #"\n"
0 0 17 3 3 #"  ("
0 0 17 3 4 #"cond"
0 0 17 3 3 #" [("
0 0 17 3 6 #"empty?"
0 0 17 3 1 #" "
0 0 17 3 3 #"lst"
0 0 17 3 2 #") "
0 0 17 3 9 #"finallist"
0 0 17 3 1 #"]"
0 0 17 29 1 #"\n"
0 0 17 3 9 #"        ["
0 0 17 3 4 #"else"
0 0 17 3 2 #" ("
0 0 17 3 16 #"reverse-list/acc"
0 0 17 3 2 #" ("
0 0 17 3 4 #"rest"
0 0 17 3 1 #" "
0 0 17 3 3 #"lst"
0 0 17 3 3 #") ("
0 0 17 3 4 #"cons"
0 0 17 3 2 #" ("
0 0 17 3 5 #"first"
0 0 17 3 1 #" "
0 0 17 3 3 #"lst"
0 0 17 3 2 #") "
0 0 17 3 9 #"finallist"
0 0 17 3 5 #"))]))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 20 #";; Wraper of reverse"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 12 #"reverse-list"
0 0 17 3 1 #" "
0 0 17 3 3 #"lst"
0 0 17 3 1 #")"
0 0 17 29 1 #"\n"
0 0 17 3 3 #"  ("
0 0 17 3 16 #"reverse-list/acc"
0 0 17 3 1 #" "
0 0 17 3 3 #"lst"
0 0 17 3 1 #" "
0 0 17 3 5 #"empty"
0 0 17 3 2 #"))"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 12 #"reverse-list"
0 0 17 3 1 #" "
0 0 17 3 3 #"ss1"
0 0 17 3 1 #")"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";; Q2a"
0 0 24 29 1 #"\n"
0           0
